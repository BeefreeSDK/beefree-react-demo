import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded") return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/fp-ts/lib/function.js
var require_function = __commonJS({
  "node_modules/fp-ts/lib/function.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i2);
          ar[i2] = from[i2];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dual = exports.getEndomorphismMonoid = exports.SK = exports.hole = exports.constVoid = exports.constUndefined = exports.constNull = exports.constFalse = exports.constTrue = exports.unsafeCoerce = exports.apply = exports.getRing = exports.getSemiring = exports.getMonoid = exports.getSemigroup = exports.getBooleanAlgebra = void 0;
    exports.identity = identity;
    exports.constant = constant;
    exports.flip = flip;
    exports.flow = flow;
    exports.tuple = tuple;
    exports.increment = increment;
    exports.decrement = decrement;
    exports.absurd = absurd;
    exports.tupled = tupled;
    exports.untupled = untupled;
    exports.pipe = pipe;
    exports.not = not;
    var getBooleanAlgebra = function(B2) {
      return function() {
        return {
          meet: function(x2, y2) {
            return function(a2) {
              return B2.meet(x2(a2), y2(a2));
            };
          },
          join: function(x2, y2) {
            return function(a2) {
              return B2.join(x2(a2), y2(a2));
            };
          },
          zero: function() {
            return B2.zero;
          },
          one: function() {
            return B2.one;
          },
          implies: function(x2, y2) {
            return function(a2) {
              return B2.implies(x2(a2), y2(a2));
            };
          },
          not: function(x2) {
            return function(a2) {
              return B2.not(x2(a2));
            };
          }
        };
      };
    };
    exports.getBooleanAlgebra = getBooleanAlgebra;
    var getSemigroup = function(S2) {
      return function() {
        return {
          concat: function(f2, g2) {
            return function(a2) {
              return S2.concat(f2(a2), g2(a2));
            };
          }
        };
      };
    };
    exports.getSemigroup = getSemigroup;
    var getMonoid = function(M2) {
      var getSemigroupM = (0, exports.getSemigroup)(M2);
      return function() {
        return {
          concat: getSemigroupM().concat,
          empty: function() {
            return M2.empty;
          }
        };
      };
    };
    exports.getMonoid = getMonoid;
    var getSemiring = function(S2) {
      return {
        add: function(f2, g2) {
          return function(x2) {
            return S2.add(f2(x2), g2(x2));
          };
        },
        zero: function() {
          return S2.zero;
        },
        mul: function(f2, g2) {
          return function(x2) {
            return S2.mul(f2(x2), g2(x2));
          };
        },
        one: function() {
          return S2.one;
        }
      };
    };
    exports.getSemiring = getSemiring;
    var getRing = function(R2) {
      var S2 = (0, exports.getSemiring)(R2);
      return {
        add: S2.add,
        mul: S2.mul,
        one: S2.one,
        zero: S2.zero,
        sub: function(f2, g2) {
          return function(x2) {
            return R2.sub(f2(x2), g2(x2));
          };
        }
      };
    };
    exports.getRing = getRing;
    var apply = function(a2) {
      return function(f2) {
        return f2(a2);
      };
    };
    exports.apply = apply;
    function identity(a2) {
      return a2;
    }
    exports.unsafeCoerce = identity;
    function constant(a2) {
      return function() {
        return a2;
      };
    }
    exports.constTrue = constant(true);
    exports.constFalse = constant(false);
    exports.constNull = constant(null);
    exports.constUndefined = constant(void 0);
    exports.constVoid = exports.constUndefined;
    function flip(f2) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        if (args.length > 1) {
          return f2(args[1], args[0]);
        }
        return function(a2) {
          return f2(a2)(args[0]);
        };
      };
    }
    function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
      switch (arguments.length) {
        case 1:
          return ab;
        case 2:
          return function() {
            return bc(ab.apply(this, arguments));
          };
        case 3:
          return function() {
            return cd(bc(ab.apply(this, arguments)));
          };
        case 4:
          return function() {
            return de(cd(bc(ab.apply(this, arguments))));
          };
        case 5:
          return function() {
            return ef(de(cd(bc(ab.apply(this, arguments)))));
          };
        case 6:
          return function() {
            return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
          };
        case 7:
          return function() {
            return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
          };
        case 8:
          return function() {
            return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
          };
        case 9:
          return function() {
            return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
          };
      }
      return;
    }
    function tuple() {
      var t2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        t2[_i] = arguments[_i];
      }
      return t2;
    }
    function increment(n2) {
      return n2 + 1;
    }
    function decrement(n2) {
      return n2 - 1;
    }
    function absurd(_2) {
      throw new Error("Called `absurd` function which should be uncallable");
    }
    function tupled(f2) {
      return function(a2) {
        return f2.apply(void 0, a2);
      };
    }
    function untupled(f2) {
      return function() {
        var a2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          a2[_i] = arguments[_i];
        }
        return f2(a2);
      };
    }
    function pipe(a2, ab, bc, cd, de, ef, fg, gh, hi) {
      switch (arguments.length) {
        case 1:
          return a2;
        case 2:
          return ab(a2);
        case 3:
          return bc(ab(a2));
        case 4:
          return cd(bc(ab(a2)));
        case 5:
          return de(cd(bc(ab(a2))));
        case 6:
          return ef(de(cd(bc(ab(a2)))));
        case 7:
          return fg(ef(de(cd(bc(ab(a2))))));
        case 8:
          return gh(fg(ef(de(cd(bc(ab(a2)))))));
        case 9:
          return hi(gh(fg(ef(de(cd(bc(ab(a2))))))));
        default: {
          var ret = arguments[0];
          for (var i2 = 1; i2 < arguments.length; i2++) {
            ret = arguments[i2](ret);
          }
          return ret;
        }
      }
    }
    exports.hole = absurd;
    var SK = function(_2, b2) {
      return b2;
    };
    exports.SK = SK;
    function not(predicate) {
      return function(a2) {
        return !predicate(a2);
      };
    }
    var getEndomorphismMonoid = function() {
      return {
        concat: function(first, second) {
          return flow(first, second);
        },
        empty: identity
      };
    };
    exports.getEndomorphismMonoid = getEndomorphismMonoid;
    var dual = function(arity, body) {
      var isDataFirst = typeof arity === "number" ? function(args) {
        return args.length >= arity;
      } : arity;
      return function() {
        var args = Array.from(arguments);
        if (isDataFirst(arguments)) {
          return body.apply(this, args);
        }
        return function(self2) {
          return body.apply(void 0, __spreadArray([self2], args, false));
        };
      };
    };
    exports.dual = dual;
  }
});

// node_modules/fp-ts/lib/internal.js
var require_internal = __commonJS({
  "node_modules/fp-ts/lib/internal.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i2);
          ar[i2] = from[i2];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flatMapReader = exports.flatMapTask = exports.flatMapIO = exports.flatMapEither = exports.flatMapOption = exports.flatMapNullable = exports.liftOption = exports.liftNullable = exports.fromReadonlyNonEmptyArray = exports.has = exports.emptyRecord = exports.emptyReadonlyArray = exports.tail = exports.head = exports.isNonEmpty = exports.singleton = exports.right = exports.left = exports.isRight = exports.isLeft = exports.some = exports.none = exports.isSome = exports.isNone = void 0;
    var function_1 = require_function();
    var isNone = function(fa) {
      return fa._tag === "None";
    };
    exports.isNone = isNone;
    var isSome = function(fa) {
      return fa._tag === "Some";
    };
    exports.isSome = isSome;
    exports.none = { _tag: "None" };
    var some = function(a2) {
      return { _tag: "Some", value: a2 };
    };
    exports.some = some;
    var isLeft = function(ma) {
      return ma._tag === "Left";
    };
    exports.isLeft = isLeft;
    var isRight = function(ma) {
      return ma._tag === "Right";
    };
    exports.isRight = isRight;
    var left2 = function(e) {
      return { _tag: "Left", left: e };
    };
    exports.left = left2;
    var right2 = function(a2) {
      return { _tag: "Right", right: a2 };
    };
    exports.right = right2;
    var singleton = function(a2) {
      return [a2];
    };
    exports.singleton = singleton;
    var isNonEmpty = function(as) {
      return as.length > 0;
    };
    exports.isNonEmpty = isNonEmpty;
    var head = function(as) {
      return as[0];
    };
    exports.head = head;
    var tail = function(as) {
      return as.slice(1);
    };
    exports.tail = tail;
    exports.emptyReadonlyArray = [];
    exports.emptyRecord = {};
    exports.has = Object.prototype.hasOwnProperty;
    var fromReadonlyNonEmptyArray = function(as) {
      return __spreadArray([as[0]], as.slice(1), true);
    };
    exports.fromReadonlyNonEmptyArray = fromReadonlyNonEmptyArray;
    var liftNullable = function(F2) {
      return function(f2, onNullable) {
        return function() {
          var a2 = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            a2[_i] = arguments[_i];
          }
          var o2 = f2.apply(void 0, a2);
          return F2.fromEither(o2 == null ? (0, exports.left)(onNullable.apply(void 0, a2)) : (0, exports.right)(o2));
        };
      };
    };
    exports.liftNullable = liftNullable;
    var liftOption = function(F2) {
      return function(f2, onNone) {
        return function() {
          var a2 = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            a2[_i] = arguments[_i];
          }
          var o2 = f2.apply(void 0, a2);
          return F2.fromEither((0, exports.isNone)(o2) ? (0, exports.left)(onNone.apply(void 0, a2)) : (0, exports.right)(o2.value));
        };
      };
    };
    exports.liftOption = liftOption;
    var flatMapNullable = function(F2, M2) {
      return (0, function_1.dual)(3, function(self2, f2, onNullable) {
        return M2.flatMap(self2, (0, exports.liftNullable)(F2)(f2, onNullable));
      });
    };
    exports.flatMapNullable = flatMapNullable;
    var flatMapOption = function(F2, M2) {
      return (0, function_1.dual)(3, function(self2, f2, onNone) {
        return M2.flatMap(self2, (0, exports.liftOption)(F2)(f2, onNone));
      });
    };
    exports.flatMapOption = flatMapOption;
    var flatMapEither = function(F2, M2) {
      return (0, function_1.dual)(2, function(self2, f2) {
        return M2.flatMap(self2, function(a2) {
          return F2.fromEither(f2(a2));
        });
      });
    };
    exports.flatMapEither = flatMapEither;
    var flatMapIO = function(F2, M2) {
      return (0, function_1.dual)(2, function(self2, f2) {
        return M2.flatMap(self2, function(a2) {
          return F2.fromIO(f2(a2));
        });
      });
    };
    exports.flatMapIO = flatMapIO;
    var flatMapTask = function(F2, M2) {
      return (0, function_1.dual)(2, function(self2, f2) {
        return M2.flatMap(self2, function(a2) {
          return F2.fromTask(f2(a2));
        });
      });
    };
    exports.flatMapTask = flatMapTask;
    var flatMapReader = function(F2, M2) {
      return (0, function_1.dual)(2, function(self2, f2) {
        return M2.flatMap(self2, function(a2) {
          return F2.fromReader(f2(a2));
        });
      });
    };
    exports.flatMapReader = flatMapReader;
  }
});

// node_modules/fp-ts/lib/Apply.js
var require_Apply = __commonJS({
  "node_modules/fp-ts/lib/Apply.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ap = ap;
    exports.apFirst = apFirst;
    exports.apSecond = apSecond;
    exports.apS = apS;
    exports.getApplySemigroup = getApplySemigroup;
    exports.sequenceT = sequenceT;
    exports.sequenceS = sequenceS;
    var function_1 = require_function();
    var _2 = __importStar(require_internal());
    function ap(F2, G2) {
      return function(fa) {
        return function(fab) {
          return F2.ap(F2.map(fab, function(gab) {
            return function(ga) {
              return G2.ap(gab, ga);
            };
          }), fa);
        };
      };
    }
    function apFirst(A2) {
      return function(second) {
        return function(first) {
          return A2.ap(A2.map(first, function(a2) {
            return function() {
              return a2;
            };
          }), second);
        };
      };
    }
    function apSecond(A2) {
      return function(second) {
        return function(first) {
          return A2.ap(A2.map(first, function() {
            return function(b2) {
              return b2;
            };
          }), second);
        };
      };
    }
    function apS(F2) {
      return function(name, fb) {
        return function(fa) {
          return F2.ap(F2.map(fa, function(a2) {
            return function(b2) {
              var _a;
              return Object.assign({}, a2, (_a = {}, _a[name] = b2, _a));
            };
          }), fb);
        };
      };
    }
    function getApplySemigroup(F2) {
      return function(S2) {
        return {
          concat: function(first, second) {
            return F2.ap(F2.map(first, function(x2) {
              return function(y2) {
                return S2.concat(x2, y2);
              };
            }), second);
          }
        };
      };
    }
    function curried(f2, n2, acc) {
      return function(x2) {
        var combined = Array(acc.length + 1);
        for (var i2 = 0; i2 < acc.length; i2++) {
          combined[i2] = acc[i2];
        }
        combined[acc.length] = x2;
        return n2 === 0 ? f2.apply(null, combined) : curried(f2, n2 - 1, combined);
      };
    }
    var tupleConstructors = {
      1: function(a2) {
        return [a2];
      },
      2: function(a2) {
        return function(b2) {
          return [a2, b2];
        };
      },
      3: function(a2) {
        return function(b2) {
          return function(c2) {
            return [a2, b2, c2];
          };
        };
      },
      4: function(a2) {
        return function(b2) {
          return function(c2) {
            return function(d2) {
              return [a2, b2, c2, d2];
            };
          };
        };
      },
      5: function(a2) {
        return function(b2) {
          return function(c2) {
            return function(d2) {
              return function(e) {
                return [a2, b2, c2, d2, e];
              };
            };
          };
        };
      }
    };
    function getTupleConstructor(len) {
      if (!_2.has.call(tupleConstructors, len)) {
        tupleConstructors[len] = curried(function_1.tuple, len - 1, []);
      }
      return tupleConstructors[len];
    }
    function sequenceT(F2) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var len = args.length;
        var f2 = getTupleConstructor(len);
        var fas = F2.map(args[0], f2);
        for (var i2 = 1; i2 < len; i2++) {
          fas = F2.ap(fas, args[i2]);
        }
        return fas;
      };
    }
    function getRecordConstructor(keys) {
      var len = keys.length;
      switch (len) {
        case 1:
          return function(a2) {
            var _a;
            return _a = {}, _a[keys[0]] = a2, _a;
          };
        case 2:
          return function(a2) {
            return function(b2) {
              var _a;
              return _a = {}, _a[keys[0]] = a2, _a[keys[1]] = b2, _a;
            };
          };
        case 3:
          return function(a2) {
            return function(b2) {
              return function(c2) {
                var _a;
                return _a = {}, _a[keys[0]] = a2, _a[keys[1]] = b2, _a[keys[2]] = c2, _a;
              };
            };
          };
        case 4:
          return function(a2) {
            return function(b2) {
              return function(c2) {
                return function(d2) {
                  var _a;
                  return _a = {}, _a[keys[0]] = a2, _a[keys[1]] = b2, _a[keys[2]] = c2, _a[keys[3]] = d2, _a;
                };
              };
            };
          };
        case 5:
          return function(a2) {
            return function(b2) {
              return function(c2) {
                return function(d2) {
                  return function(e) {
                    var _a;
                    return _a = {}, _a[keys[0]] = a2, _a[keys[1]] = b2, _a[keys[2]] = c2, _a[keys[3]] = d2, _a[keys[4]] = e, _a;
                  };
                };
              };
            };
          };
        default:
          return curried(function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var r2 = {};
            for (var i2 = 0; i2 < len; i2++) {
              r2[keys[i2]] = args[i2];
            }
            return r2;
          }, len - 1, []);
      }
    }
    function sequenceS(F2) {
      return function(r2) {
        var keys = Object.keys(r2);
        var len = keys.length;
        var f2 = getRecordConstructor(keys);
        var fr = F2.map(r2[keys[0]], f2);
        for (var i2 = 1; i2 < len; i2++) {
          fr = F2.ap(fr, r2[keys[i2]]);
        }
        return fr;
      };
    }
  }
});

// node_modules/fp-ts/lib/Functor.js
var require_Functor = __commonJS({
  "node_modules/fp-ts/lib/Functor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.map = map;
    exports.flap = flap;
    exports.bindTo = bindTo;
    exports.let = let_;
    exports.getFunctorComposition = getFunctorComposition;
    exports.as = as;
    exports.asUnit = asUnit;
    var function_1 = require_function();
    function map(F2, G2) {
      return function(f2) {
        return function(fa) {
          return F2.map(fa, function(ga) {
            return G2.map(ga, f2);
          });
        };
      };
    }
    function flap(F2) {
      return function(a2) {
        return function(fab) {
          return F2.map(fab, function(f2) {
            return f2(a2);
          });
        };
      };
    }
    function bindTo(F2) {
      return function(name) {
        return function(fa) {
          return F2.map(fa, function(a2) {
            var _a;
            return _a = {}, _a[name] = a2, _a;
          });
        };
      };
    }
    function let_(F2) {
      return function(name, f2) {
        return function(fa) {
          return F2.map(fa, function(a2) {
            var _a;
            return Object.assign({}, a2, (_a = {}, _a[name] = f2(a2), _a));
          });
        };
      };
    }
    function getFunctorComposition(F2, G2) {
      var _map = map(F2, G2);
      return {
        map: function(fga, f2) {
          return (0, function_1.pipe)(fga, _map(f2));
        }
      };
    }
    function as(F2) {
      return function(self2, b2) {
        return F2.map(self2, function() {
          return b2;
        });
      };
    }
    function asUnit(F2) {
      var asM = as(F2);
      return function(self2) {
        return asM(self2, void 0);
      };
    }
  }
});

// node_modules/fp-ts/lib/Applicative.js
var require_Applicative = __commonJS({
  "node_modules/fp-ts/lib/Applicative.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getApplicativeMonoid = getApplicativeMonoid;
    exports.getApplicativeComposition = getApplicativeComposition;
    var Apply_1 = require_Apply();
    var function_1 = require_function();
    var Functor_1 = require_Functor();
    function getApplicativeMonoid(F2) {
      var f2 = (0, Apply_1.getApplySemigroup)(F2);
      return function(M2) {
        return {
          concat: f2(M2).concat,
          empty: F2.of(M2.empty)
        };
      };
    }
    function getApplicativeComposition(F2, G2) {
      var map = (0, Functor_1.getFunctorComposition)(F2, G2).map;
      var _ap = (0, Apply_1.ap)(F2, G2);
      return {
        map,
        of: function(a2) {
          return F2.of(G2.of(a2));
        },
        ap: function(fgab, fga) {
          return (0, function_1.pipe)(fgab, _ap(fga));
        }
      };
    }
  }
});

// node_modules/fp-ts/lib/Chain.js
var require_Chain = __commonJS({
  "node_modules/fp-ts/lib/Chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chainFirst = chainFirst;
    exports.tap = tap;
    exports.bind = bind2;
    function chainFirst(M2) {
      var tapM = tap(M2);
      return function(f2) {
        return function(first) {
          return tapM(first, f2);
        };
      };
    }
    function tap(M2) {
      return function(first, f2) {
        return M2.chain(first, function(a2) {
          return M2.map(f2(a2), function() {
            return a2;
          });
        });
      };
    }
    function bind2(M2) {
      return function(name, f2) {
        return function(ma) {
          return M2.chain(ma, function(a2) {
            return M2.map(f2(a2), function(b2) {
              var _a;
              return Object.assign({}, a2, (_a = {}, _a[name] = b2, _a));
            });
          });
        };
      };
    }
  }
});

// node_modules/fp-ts/lib/ChainRec.js
var require_ChainRec = __commonJS({
  "node_modules/fp-ts/lib/ChainRec.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tailRec = void 0;
    var tailRec = function(startWith, f2) {
      var ab = f2(startWith);
      while (ab._tag === "Left") {
        ab = f2(ab.left);
      }
      return ab.right;
    };
    exports.tailRec = tailRec;
  }
});

// node_modules/fp-ts/lib/FromEither.js
var require_FromEither = __commonJS({
  "node_modules/fp-ts/lib/FromEither.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromOption = fromOption;
    exports.fromPredicate = fromPredicate;
    exports.fromOptionK = fromOptionK;
    exports.chainOptionK = chainOptionK;
    exports.fromEitherK = fromEitherK;
    exports.chainEitherK = chainEitherK;
    exports.chainFirstEitherK = chainFirstEitherK;
    exports.filterOrElse = filterOrElse;
    exports.tapEither = tapEither;
    var Chain_1 = require_Chain();
    var function_1 = require_function();
    var _2 = __importStar(require_internal());
    function fromOption(F2) {
      return function(onNone) {
        return function(ma) {
          return F2.fromEither(_2.isNone(ma) ? _2.left(onNone()) : _2.right(ma.value));
        };
      };
    }
    function fromPredicate(F2) {
      return function(predicate, onFalse) {
        return function(a2) {
          return F2.fromEither(predicate(a2) ? _2.right(a2) : _2.left(onFalse(a2)));
        };
      };
    }
    function fromOptionK(F2) {
      var fromOptionF = fromOption(F2);
      return function(onNone) {
        var from = fromOptionF(onNone);
        return function(f2) {
          return (0, function_1.flow)(f2, from);
        };
      };
    }
    function chainOptionK(F2, M2) {
      var fromOptionKF = fromOptionK(F2);
      return function(onNone) {
        var from = fromOptionKF(onNone);
        return function(f2) {
          return function(ma) {
            return M2.chain(ma, from(f2));
          };
        };
      };
    }
    function fromEitherK(F2) {
      return function(f2) {
        return (0, function_1.flow)(f2, F2.fromEither);
      };
    }
    function chainEitherK(F2, M2) {
      var fromEitherKF = fromEitherK(F2);
      return function(f2) {
        return function(ma) {
          return M2.chain(ma, fromEitherKF(f2));
        };
      };
    }
    function chainFirstEitherK(F2, M2) {
      var tapEitherM = tapEither(F2, M2);
      return function(f2) {
        return function(ma) {
          return tapEitherM(ma, f2);
        };
      };
    }
    function filterOrElse(F2, M2) {
      return function(predicate, onFalse) {
        return function(ma) {
          return M2.chain(ma, function(a2) {
            return F2.fromEither(predicate(a2) ? _2.right(a2) : _2.left(onFalse(a2)));
          });
        };
      };
    }
    function tapEither(F2, M2) {
      var fromEither = fromEitherK(F2);
      var tapM = (0, Chain_1.tap)(M2);
      return function(self2, f2) {
        return tapM(self2, fromEither(f2));
      };
    }
  }
});

// node_modules/fp-ts/lib/Separated.js
var require_Separated = __commonJS({
  "node_modules/fp-ts/lib/Separated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.right = exports.left = exports.flap = exports.Functor = exports.Bifunctor = exports.URI = exports.bimap = exports.mapLeft = exports.map = exports.separated = void 0;
    var function_1 = require_function();
    var Functor_1 = require_Functor();
    var separated = function(left3, right3) {
      return { left: left3, right: right3 };
    };
    exports.separated = separated;
    var _map = function(fa, f2) {
      return (0, function_1.pipe)(fa, (0, exports.map)(f2));
    };
    var _mapLeft = function(fa, f2) {
      return (0, function_1.pipe)(fa, (0, exports.mapLeft)(f2));
    };
    var _bimap = function(fa, g2, f2) {
      return (0, function_1.pipe)(fa, (0, exports.bimap)(g2, f2));
    };
    var map = function(f2) {
      return function(fa) {
        return (0, exports.separated)((0, exports.left)(fa), f2((0, exports.right)(fa)));
      };
    };
    exports.map = map;
    var mapLeft = function(f2) {
      return function(fa) {
        return (0, exports.separated)(f2((0, exports.left)(fa)), (0, exports.right)(fa));
      };
    };
    exports.mapLeft = mapLeft;
    var bimap = function(f2, g2) {
      return function(fa) {
        return (0, exports.separated)(f2((0, exports.left)(fa)), g2((0, exports.right)(fa)));
      };
    };
    exports.bimap = bimap;
    exports.URI = "Separated";
    exports.Bifunctor = {
      URI: exports.URI,
      mapLeft: _mapLeft,
      bimap: _bimap
    };
    exports.Functor = {
      URI: exports.URI,
      map: _map
    };
    exports.flap = (0, Functor_1.flap)(exports.Functor);
    var left2 = function(s2) {
      return s2.left;
    };
    exports.left = left2;
    var right2 = function(s2) {
      return s2.right;
    };
    exports.right = right2;
  }
});

// node_modules/fp-ts/lib/Witherable.js
var require_Witherable = __commonJS({
  "node_modules/fp-ts/lib/Witherable.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wiltDefault = wiltDefault;
    exports.witherDefault = witherDefault;
    exports.filterE = filterE;
    var _2 = __importStar(require_internal());
    function wiltDefault(T2, C2) {
      return function(F2) {
        var traverseF = T2.traverse(F2);
        return function(wa, f2) {
          return F2.map(traverseF(wa, f2), C2.separate);
        };
      };
    }
    function witherDefault(T2, C2) {
      return function(F2) {
        var traverseF = T2.traverse(F2);
        return function(wa, f2) {
          return F2.map(traverseF(wa, f2), C2.compact);
        };
      };
    }
    function filterE(W2) {
      return function(F2) {
        var witherF = W2.wither(F2);
        return function(predicate) {
          return function(ga) {
            return witherF(ga, function(a2) {
              return F2.map(predicate(a2), function(b2) {
                return b2 ? _2.some(a2) : _2.none;
              });
            });
          };
        };
      };
    }
  }
});

// node_modules/fp-ts/lib/Either.js
var require_Either = __commonJS({
  "node_modules/fp-ts/lib/Either.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.match = exports.foldW = exports.matchW = exports.isRight = exports.isLeft = exports.fromOption = exports.fromPredicate = exports.FromEither = exports.MonadThrow = exports.throwError = exports.ChainRec = exports.Extend = exports.extend = exports.Alt = exports.alt = exports.altW = exports.Bifunctor = exports.mapLeft = exports.bimap = exports.Traversable = exports.sequence = exports.traverse = exports.Foldable = exports.reduceRight = exports.foldMap = exports.reduce = exports.Monad = exports.Chain = exports.Applicative = exports.Apply = exports.ap = exports.apW = exports.Pointed = exports.of = exports.asUnit = exports.as = exports.Functor = exports.map = exports.getAltValidation = exports.getApplicativeValidation = exports.getWitherable = exports.getFilterable = exports.getCompactable = exports.getSemigroup = exports.getEq = exports.getShow = exports.URI = exports.flatMap = exports.right = exports.left = void 0;
    exports.either = exports.stringifyJSON = exports.chainFirstW = exports.chainFirst = exports.chain = exports.chainW = exports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex = exports.traverseReadonlyNonEmptyArrayWithIndex = exports.ApT = exports.apSW = exports.apS = exports.bindW = exports.bind = exports.let = exports.bindTo = exports.Do = exports.exists = exports.toUnion = exports.chainNullableK = exports.fromNullableK = exports.tryCatchK = exports.tryCatch = exports.fromNullable = exports.orElse = exports.orElseW = exports.swap = exports.filterOrElseW = exports.filterOrElse = exports.flatMapOption = exports.flatMapNullable = exports.liftOption = exports.liftNullable = exports.chainOptionKW = exports.chainOptionK = exports.fromOptionK = exports.duplicate = exports.flatten = exports.flattenW = exports.tap = exports.apSecondW = exports.apSecond = exports.apFirstW = exports.apFirst = exports.flap = exports.getOrElse = exports.getOrElseW = exports.fold = void 0;
    exports.getValidationMonoid = exports.getValidationSemigroup = exports.getApplyMonoid = exports.getApplySemigroup = void 0;
    exports.toError = toError;
    exports.elem = elem;
    exports.parseJSON = parseJSON;
    exports.getValidation = getValidation;
    var Applicative_1 = require_Applicative();
    var Apply_1 = require_Apply();
    var chainable = __importStar(require_Chain());
    var ChainRec_1 = require_ChainRec();
    var FromEither_1 = require_FromEither();
    var function_1 = require_function();
    var Functor_1 = require_Functor();
    var _2 = __importStar(require_internal());
    var Separated_1 = require_Separated();
    var Witherable_1 = require_Witherable();
    exports.left = _2.left;
    exports.right = _2.right;
    exports.flatMap = (0, function_1.dual)(2, function(ma, f2) {
      return (0, exports.isLeft)(ma) ? ma : f2(ma.right);
    });
    var _map = function(fa, f2) {
      return (0, function_1.pipe)(fa, (0, exports.map)(f2));
    };
    var _ap = function(fab, fa) {
      return (0, function_1.pipe)(fab, (0, exports.ap)(fa));
    };
    var _reduce = function(fa, b2, f2) {
      return (0, function_1.pipe)(fa, (0, exports.reduce)(b2, f2));
    };
    var _foldMap = function(M2) {
      return function(fa, f2) {
        var foldMapM = (0, exports.foldMap)(M2);
        return (0, function_1.pipe)(fa, foldMapM(f2));
      };
    };
    var _reduceRight = function(fa, b2, f2) {
      return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b2, f2));
    };
    var _traverse = function(F2) {
      var traverseF = (0, exports.traverse)(F2);
      return function(ta, f2) {
        return (0, function_1.pipe)(ta, traverseF(f2));
      };
    };
    var _bimap = function(fa, f2, g2) {
      return (0, function_1.pipe)(fa, (0, exports.bimap)(f2, g2));
    };
    var _mapLeft = function(fa, f2) {
      return (0, function_1.pipe)(fa, (0, exports.mapLeft)(f2));
    };
    var _alt = function(fa, that) {
      return (0, function_1.pipe)(fa, (0, exports.alt)(that));
    };
    var _extend = function(wa, f2) {
      return (0, function_1.pipe)(wa, (0, exports.extend)(f2));
    };
    var _chainRec = function(a2, f2) {
      return (0, ChainRec_1.tailRec)(f2(a2), function(e) {
        return (0, exports.isLeft)(e) ? (0, exports.right)((0, exports.left)(e.left)) : (0, exports.isLeft)(e.right) ? (0, exports.left)(f2(e.right.left)) : (0, exports.right)((0, exports.right)(e.right.right));
      });
    };
    exports.URI = "Either";
    var getShow = function(SE, SA) {
      return {
        show: function(ma) {
          return (0, exports.isLeft)(ma) ? "left(".concat(SE.show(ma.left), ")") : "right(".concat(SA.show(ma.right), ")");
        }
      };
    };
    exports.getShow = getShow;
    var getEq = function(EL, EA) {
      return {
        equals: function(x2, y2) {
          return x2 === y2 || ((0, exports.isLeft)(x2) ? (0, exports.isLeft)(y2) && EL.equals(x2.left, y2.left) : (0, exports.isRight)(y2) && EA.equals(x2.right, y2.right));
        }
      };
    };
    exports.getEq = getEq;
    var getSemigroup = function(S2) {
      return {
        concat: function(x2, y2) {
          return (0, exports.isLeft)(y2) ? x2 : (0, exports.isLeft)(x2) ? y2 : (0, exports.right)(S2.concat(x2.right, y2.right));
        }
      };
    };
    exports.getSemigroup = getSemigroup;
    var getCompactable = function(M2) {
      var empty = (0, exports.left)(M2.empty);
      return {
        URI: exports.URI,
        _E: void 0,
        compact: function(ma) {
          return (0, exports.isLeft)(ma) ? ma : ma.right._tag === "None" ? empty : (0, exports.right)(ma.right.value);
        },
        separate: function(ma) {
          return (0, exports.isLeft)(ma) ? (0, Separated_1.separated)(ma, ma) : (0, exports.isLeft)(ma.right) ? (0, Separated_1.separated)((0, exports.right)(ma.right.left), empty) : (0, Separated_1.separated)(empty, (0, exports.right)(ma.right.right));
        }
      };
    };
    exports.getCompactable = getCompactable;
    var getFilterable = function(M2) {
      var empty = (0, exports.left)(M2.empty);
      var _a = (0, exports.getCompactable)(M2), compact = _a.compact, separate = _a.separate;
      var filter2 = function(ma, predicate) {
        return (0, exports.isLeft)(ma) ? ma : predicate(ma.right) ? ma : empty;
      };
      var partition = function(ma, p2) {
        return (0, exports.isLeft)(ma) ? (0, Separated_1.separated)(ma, ma) : p2(ma.right) ? (0, Separated_1.separated)(empty, (0, exports.right)(ma.right)) : (0, Separated_1.separated)((0, exports.right)(ma.right), empty);
      };
      return {
        URI: exports.URI,
        _E: void 0,
        map: _map,
        compact,
        separate,
        filter: filter2,
        filterMap: function(ma, f2) {
          if ((0, exports.isLeft)(ma)) {
            return ma;
          }
          var ob = f2(ma.right);
          return ob._tag === "None" ? empty : (0, exports.right)(ob.value);
        },
        partition,
        partitionMap: function(ma, f2) {
          if ((0, exports.isLeft)(ma)) {
            return (0, Separated_1.separated)(ma, ma);
          }
          var e = f2(ma.right);
          return (0, exports.isLeft)(e) ? (0, Separated_1.separated)((0, exports.right)(e.left), empty) : (0, Separated_1.separated)(empty, (0, exports.right)(e.right));
        }
      };
    };
    exports.getFilterable = getFilterable;
    var getWitherable = function(M2) {
      var F_ = (0, exports.getFilterable)(M2);
      var C2 = (0, exports.getCompactable)(M2);
      return {
        URI: exports.URI,
        _E: void 0,
        map: _map,
        compact: F_.compact,
        separate: F_.separate,
        filter: F_.filter,
        filterMap: F_.filterMap,
        partition: F_.partition,
        partitionMap: F_.partitionMap,
        traverse: _traverse,
        sequence: exports.sequence,
        reduce: _reduce,
        foldMap: _foldMap,
        reduceRight: _reduceRight,
        wither: (0, Witherable_1.witherDefault)(exports.Traversable, C2),
        wilt: (0, Witherable_1.wiltDefault)(exports.Traversable, C2)
      };
    };
    exports.getWitherable = getWitherable;
    var getApplicativeValidation = function(SE) {
      return {
        URI: exports.URI,
        _E: void 0,
        map: _map,
        ap: function(fab, fa) {
          return (0, exports.isLeft)(fab) ? (0, exports.isLeft)(fa) ? (0, exports.left)(SE.concat(fab.left, fa.left)) : fab : (0, exports.isLeft)(fa) ? fa : (0, exports.right)(fab.right(fa.right));
        },
        of: exports.of
      };
    };
    exports.getApplicativeValidation = getApplicativeValidation;
    var getAltValidation = function(SE) {
      return {
        URI: exports.URI,
        _E: void 0,
        map: _map,
        alt: function(me, that) {
          if ((0, exports.isRight)(me)) {
            return me;
          }
          var ea = that();
          return (0, exports.isLeft)(ea) ? (0, exports.left)(SE.concat(me.left, ea.left)) : ea;
        }
      };
    };
    exports.getAltValidation = getAltValidation;
    var map = function(f2) {
      return function(fa) {
        return (0, exports.isLeft)(fa) ? fa : (0, exports.right)(f2(fa.right));
      };
    };
    exports.map = map;
    exports.Functor = {
      URI: exports.URI,
      map: _map
    };
    exports.as = (0, function_1.dual)(2, (0, Functor_1.as)(exports.Functor));
    exports.asUnit = (0, Functor_1.asUnit)(exports.Functor);
    exports.of = exports.right;
    exports.Pointed = {
      URI: exports.URI,
      of: exports.of
    };
    var apW = function(fa) {
      return function(fab) {
        return (0, exports.isLeft)(fab) ? fab : (0, exports.isLeft)(fa) ? fa : (0, exports.right)(fab.right(fa.right));
      };
    };
    exports.apW = apW;
    exports.ap = exports.apW;
    exports.Apply = {
      URI: exports.URI,
      map: _map,
      ap: _ap
    };
    exports.Applicative = {
      URI: exports.URI,
      map: _map,
      ap: _ap,
      of: exports.of
    };
    exports.Chain = {
      URI: exports.URI,
      map: _map,
      ap: _ap,
      chain: exports.flatMap
    };
    exports.Monad = {
      URI: exports.URI,
      map: _map,
      ap: _ap,
      of: exports.of,
      chain: exports.flatMap
    };
    var reduce = function(b2, f2) {
      return function(fa) {
        return (0, exports.isLeft)(fa) ? b2 : f2(b2, fa.right);
      };
    };
    exports.reduce = reduce;
    var foldMap = function(M2) {
      return function(f2) {
        return function(fa) {
          return (0, exports.isLeft)(fa) ? M2.empty : f2(fa.right);
        };
      };
    };
    exports.foldMap = foldMap;
    var reduceRight = function(b2, f2) {
      return function(fa) {
        return (0, exports.isLeft)(fa) ? b2 : f2(fa.right, b2);
      };
    };
    exports.reduceRight = reduceRight;
    exports.Foldable = {
      URI: exports.URI,
      reduce: _reduce,
      foldMap: _foldMap,
      reduceRight: _reduceRight
    };
    var traverse = function(F2) {
      return function(f2) {
        return function(ta) {
          return (0, exports.isLeft)(ta) ? F2.of((0, exports.left)(ta.left)) : F2.map(f2(ta.right), exports.right);
        };
      };
    };
    exports.traverse = traverse;
    var sequence = function(F2) {
      return function(ma) {
        return (0, exports.isLeft)(ma) ? F2.of((0, exports.left)(ma.left)) : F2.map(ma.right, exports.right);
      };
    };
    exports.sequence = sequence;
    exports.Traversable = {
      URI: exports.URI,
      map: _map,
      reduce: _reduce,
      foldMap: _foldMap,
      reduceRight: _reduceRight,
      traverse: _traverse,
      sequence: exports.sequence
    };
    var bimap = function(f2, g2) {
      return function(fa) {
        return (0, exports.isLeft)(fa) ? (0, exports.left)(f2(fa.left)) : (0, exports.right)(g2(fa.right));
      };
    };
    exports.bimap = bimap;
    var mapLeft = function(f2) {
      return function(fa) {
        return (0, exports.isLeft)(fa) ? (0, exports.left)(f2(fa.left)) : fa;
      };
    };
    exports.mapLeft = mapLeft;
    exports.Bifunctor = {
      URI: exports.URI,
      bimap: _bimap,
      mapLeft: _mapLeft
    };
    var altW = function(that) {
      return function(fa) {
        return (0, exports.isLeft)(fa) ? that() : fa;
      };
    };
    exports.altW = altW;
    exports.alt = exports.altW;
    exports.Alt = {
      URI: exports.URI,
      map: _map,
      alt: _alt
    };
    var extend2 = function(f2) {
      return function(wa) {
        return (0, exports.isLeft)(wa) ? wa : (0, exports.right)(f2(wa));
      };
    };
    exports.extend = extend2;
    exports.Extend = {
      URI: exports.URI,
      map: _map,
      extend: _extend
    };
    exports.ChainRec = {
      URI: exports.URI,
      map: _map,
      ap: _ap,
      chain: exports.flatMap,
      chainRec: _chainRec
    };
    exports.throwError = exports.left;
    exports.MonadThrow = {
      URI: exports.URI,
      map: _map,
      ap: _ap,
      of: exports.of,
      chain: exports.flatMap,
      throwError: exports.throwError
    };
    exports.FromEither = {
      URI: exports.URI,
      fromEither: function_1.identity
    };
    exports.fromPredicate = (0, FromEither_1.fromPredicate)(exports.FromEither);
    exports.fromOption = (0, FromEither_1.fromOption)(exports.FromEither);
    exports.isLeft = _2.isLeft;
    exports.isRight = _2.isRight;
    var matchW = function(onLeft, onRight) {
      return function(ma) {
        return (0, exports.isLeft)(ma) ? onLeft(ma.left) : onRight(ma.right);
      };
    };
    exports.matchW = matchW;
    exports.foldW = exports.matchW;
    exports.match = exports.matchW;
    exports.fold = exports.match;
    var getOrElseW = function(onLeft) {
      return function(ma) {
        return (0, exports.isLeft)(ma) ? onLeft(ma.left) : ma.right;
      };
    };
    exports.getOrElseW = getOrElseW;
    exports.getOrElse = exports.getOrElseW;
    exports.flap = (0, Functor_1.flap)(exports.Functor);
    exports.apFirst = (0, Apply_1.apFirst)(exports.Apply);
    exports.apFirstW = exports.apFirst;
    exports.apSecond = (0, Apply_1.apSecond)(exports.Apply);
    exports.apSecondW = exports.apSecond;
    exports.tap = (0, function_1.dual)(2, chainable.tap(exports.Chain));
    exports.flattenW = (0, exports.flatMap)(function_1.identity);
    exports.flatten = exports.flattenW;
    exports.duplicate = (0, exports.extend)(function_1.identity);
    exports.fromOptionK = (0, FromEither_1.fromOptionK)(exports.FromEither);
    exports.chainOptionK = (0, FromEither_1.chainOptionK)(exports.FromEither, exports.Chain);
    exports.chainOptionKW = exports.chainOptionK;
    var _FromEither = {
      fromEither: exports.FromEither.fromEither
    };
    exports.liftNullable = _2.liftNullable(_FromEither);
    exports.liftOption = _2.liftOption(_FromEither);
    var _FlatMap = {
      flatMap: exports.flatMap
    };
    exports.flatMapNullable = _2.flatMapNullable(_FromEither, _FlatMap);
    exports.flatMapOption = _2.flatMapOption(_FromEither, _FlatMap);
    exports.filterOrElse = (0, FromEither_1.filterOrElse)(exports.FromEither, exports.Chain);
    exports.filterOrElseW = exports.filterOrElse;
    var swap = function(ma) {
      return (0, exports.isLeft)(ma) ? (0, exports.right)(ma.left) : (0, exports.left)(ma.right);
    };
    exports.swap = swap;
    var orElseW = function(onLeft) {
      return function(ma) {
        return (0, exports.isLeft)(ma) ? onLeft(ma.left) : ma;
      };
    };
    exports.orElseW = orElseW;
    exports.orElse = exports.orElseW;
    var fromNullable = function(e) {
      return function(a2) {
        return a2 == null ? (0, exports.left)(e) : (0, exports.right)(a2);
      };
    };
    exports.fromNullable = fromNullable;
    var tryCatch = function(f2, onThrow) {
      try {
        return (0, exports.right)(f2());
      } catch (e) {
        return (0, exports.left)(onThrow(e));
      }
    };
    exports.tryCatch = tryCatch;
    var tryCatchK = function(f2, onThrow) {
      return function() {
        var a2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          a2[_i] = arguments[_i];
        }
        return (0, exports.tryCatch)(function() {
          return f2.apply(void 0, a2);
        }, onThrow);
      };
    };
    exports.tryCatchK = tryCatchK;
    var fromNullableK = function(e) {
      var from = (0, exports.fromNullable)(e);
      return function(f2) {
        return (0, function_1.flow)(f2, from);
      };
    };
    exports.fromNullableK = fromNullableK;
    var chainNullableK = function(e) {
      var from = (0, exports.fromNullableK)(e);
      return function(f2) {
        return (0, exports.flatMap)(from(f2));
      };
    };
    exports.chainNullableK = chainNullableK;
    exports.toUnion = (0, exports.foldW)(function_1.identity, function_1.identity);
    function toError(e) {
      try {
        return e instanceof Error ? e : new Error(String(e));
      } catch (error) {
        return new Error();
      }
    }
    function elem(E2) {
      return function(a2, ma) {
        if (ma === void 0) {
          var elemE_1 = elem(E2);
          return function(ma2) {
            return elemE_1(a2, ma2);
          };
        }
        return (0, exports.isLeft)(ma) ? false : E2.equals(a2, ma.right);
      };
    }
    var exists = function(predicate) {
      return function(ma) {
        return (0, exports.isLeft)(ma) ? false : predicate(ma.right);
      };
    };
    exports.exists = exists;
    exports.Do = (0, exports.of)(_2.emptyRecord);
    exports.bindTo = (0, Functor_1.bindTo)(exports.Functor);
    var let_ = (0, Functor_1.let)(exports.Functor);
    exports.let = let_;
    exports.bind = chainable.bind(exports.Chain);
    exports.bindW = exports.bind;
    exports.apS = (0, Apply_1.apS)(exports.Apply);
    exports.apSW = exports.apS;
    exports.ApT = (0, exports.of)(_2.emptyReadonlyArray);
    var traverseReadonlyNonEmptyArrayWithIndex = function(f2) {
      return function(as) {
        var e = f2(0, _2.head(as));
        if ((0, exports.isLeft)(e)) {
          return e;
        }
        var out = [e.right];
        for (var i2 = 1; i2 < as.length; i2++) {
          var e_1 = f2(i2, as[i2]);
          if ((0, exports.isLeft)(e_1)) {
            return e_1;
          }
          out.push(e_1.right);
        }
        return (0, exports.right)(out);
      };
    };
    exports.traverseReadonlyNonEmptyArrayWithIndex = traverseReadonlyNonEmptyArrayWithIndex;
    var traverseReadonlyArrayWithIndex = function(f2) {
      var g2 = (0, exports.traverseReadonlyNonEmptyArrayWithIndex)(f2);
      return function(as) {
        return _2.isNonEmpty(as) ? g2(as) : exports.ApT;
      };
    };
    exports.traverseReadonlyArrayWithIndex = traverseReadonlyArrayWithIndex;
    exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex;
    var traverseArray = function(f2) {
      return (0, exports.traverseReadonlyArrayWithIndex)(function(_3, a2) {
        return f2(a2);
      });
    };
    exports.traverseArray = traverseArray;
    exports.sequenceArray = (0, exports.traverseArray)(function_1.identity);
    exports.chainW = exports.flatMap;
    exports.chain = exports.flatMap;
    exports.chainFirst = exports.tap;
    exports.chainFirstW = exports.tap;
    function parseJSON(s2, onError) {
      return (0, exports.tryCatch)(function() {
        return JSON.parse(s2);
      }, onError);
    }
    var stringifyJSON = function(u2, onError) {
      return (0, exports.tryCatch)(function() {
        var s2 = JSON.stringify(u2);
        if (typeof s2 !== "string") {
          throw new Error("Converting unsupported structure to JSON");
        }
        return s2;
      }, onError);
    };
    exports.stringifyJSON = stringifyJSON;
    exports.either = {
      URI: exports.URI,
      map: _map,
      of: exports.of,
      ap: _ap,
      chain: exports.flatMap,
      reduce: _reduce,
      foldMap: _foldMap,
      reduceRight: _reduceRight,
      traverse: _traverse,
      sequence: exports.sequence,
      bimap: _bimap,
      mapLeft: _mapLeft,
      alt: _alt,
      extend: _extend,
      chainRec: _chainRec,
      throwError: exports.throwError
    };
    exports.getApplySemigroup = (0, Apply_1.getApplySemigroup)(exports.Apply);
    exports.getApplyMonoid = (0, Applicative_1.getApplicativeMonoid)(exports.Applicative);
    var getValidationSemigroup = function(SE, SA) {
      return (0, Apply_1.getApplySemigroup)((0, exports.getApplicativeValidation)(SE))(SA);
    };
    exports.getValidationSemigroup = getValidationSemigroup;
    var getValidationMonoid = function(SE, MA) {
      return (0, Applicative_1.getApplicativeMonoid)((0, exports.getApplicativeValidation)(SE))(MA);
    };
    exports.getValidationMonoid = getValidationMonoid;
    function getValidation(SE) {
      var ap = (0, exports.getApplicativeValidation)(SE).ap;
      var alt = (0, exports.getAltValidation)(SE).alt;
      return {
        URI: exports.URI,
        _E: void 0,
        map: _map,
        of: exports.of,
        chain: exports.flatMap,
        bimap: _bimap,
        mapLeft: _mapLeft,
        reduce: _reduce,
        foldMap: _foldMap,
        reduceRight: _reduceRight,
        extend: _extend,
        traverse: _traverse,
        sequence: exports.sequence,
        chainRec: _chainRec,
        throwError: exports.throwError,
        ap,
        alt
      };
    }
  }
});

// node_modules/@beefree.io/sdk/dist/index.es.js
var import_load_script = __toESM(require_load_script());
var import_function = __toESM(require_function());
var R = __toESM(require_Either());

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var { iterator, toStringTag } = Symbol;
var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(toStringTag in val) && !(iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i2;
  let l2;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i2 = 0, l2 = obj.length; i2 < l2; i2++) {
      fn.call(null, obj[i2], i2, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i2 = 0; i2 < len; i2++) {
      key = keys[i2];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i2 = keys.length;
  let _key;
  while (i2-- > 0) {
    _key = keys[i2];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
    arguments[i2] && forEach(arguments[i2], assignValue);
  }
  return result;
}
var extend = (a2, b2, thisArg, { allOwnKeys } = {}) => {
  forEach(b2, (val, key) => {
    if (thisArg && isFunction(val)) {
      a2[key] = bind(val, thisArg);
    } else {
      a2[key] = val;
    }
  }, { allOwnKeys });
  return a2;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i2;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i2 = props.length;
    while (i2-- > 0) {
      prop = props[i2];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i2 = thing.length;
  if (!isNumber(i2)) return null;
  const arr = new Array(i2);
  while (i2-- > 0) {
    arr[i2] = thing[i2];
  }
  return arr;
};
var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator];
  const _iterator = generator.call(obj);
  let result;
  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m2, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i2) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i2] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i2 + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i2] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction(_global.postMessage)
);
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var isIterable = (thing) => thing != null && isFunction(thing[iterator]);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i2) {
    token = removeBrackets(token);
    return !dots && i2 ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (utils_default.isBoolean(value)) {
      return value.toString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  if (utils_default.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h2) {
      if (h2 !== null) {
        fn(h2);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var _navigator = typeof navigator === "object" && navigator || void 0;
var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i2;
  const len = keys.length;
  let key;
  for (i2 = 0; i2 < len; i2++) {
    key = keys[i2];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i2;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i2 = line.indexOf(":");
    key = line.substring(0, i2).trim().toLowerCase();
    val = line.substring(i2 + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w2, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isObject(header) && utils_default.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils_default.isArray(entry)) {
          throw TypeError("Object iterator must return a key-value pair");
        }
        obj[key = entry[0]] = (dest = obj[key]) ? utils_default.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
      }
      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i2 = keys.length;
    let deleted = false;
    while (i2--) {
      const key = keys[i2];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i2 = tail;
    let bytesCount = 0;
    while (i2 !== head) {
      bytesCount += bytes[i2++];
      i2 = i2 % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
  url = new URL(url, platform_default.origin);
  return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
})(
  new URL(platform_default.origin),
  platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
) : () => true;

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a2, b2, prop, caseless) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(a2, b2, prop, caseless);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2, prop, caseless);
    }
  }
  function valueFromConfig2(a2, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    }
  }
  function defaultToConfig2(a2, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2);
    }
  }
  function mergeDirectKeys(a2, b2, prop) {
    if (prop in config2) {
      return getMergedValue(a2, b2);
    } else if (prop in config1) {
      return getMergedValue(void 0, a2);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a2, b2, prop) => mergeDeepProperties(headersToObject(a2), headersToObject(b2), prop, true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  let contentType;
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils_default.asap(unsubscribe);
    return signal;
  }
};
var composeSignals_default = composeSignals;

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
var readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
var trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator2 = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator2.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator2.return();
    }
  }, {
    highWaterMark: 2
  });
};

// node_modules/axios/lib/adapters/fetch.js
var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
var supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform_default.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
var resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
    !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_2, config) => {
      throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response());
var getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils_default.isBlob(body)) {
    return body.size;
  }
  if (utils_default.isSpecCompliantForm(body)) {
    const _request = new Request(platform_default.origin, {
      method: "POST",
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils_default.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils_default.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
var resolveBodyLength = async (headers, body) => {
  const length = utils_default.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
var fetch_default = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig_default(config);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url, {
        method: "POST",
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils_default.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : void 0
    });
    let response = await fetch(request, fetchOptions);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];
      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders_default.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      );
    }
    throw AxiosError_default.from(err, err && err.code, config, request);
  }
});

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default,
  fetch: fetch_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i2 = 0; i2 < length; i2++) {
      nameOrAdapter = adapters[i2];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i2] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s2,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.10.0";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i2 = keys.length;
  while (i2-- > 0) {
    const opt = keys[i2];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    if (config.allowAbsoluteUrls !== void 0) {
    } else if (this.defaults.allowAbsoluteUrls !== void 0) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }
    validator_default.assertOptions(config, {
      baseUrl: validators2.spelling("baseURL"),
      withXsrfToken: validators2.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i2 = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain2 = [dispatchRequest.bind(this), void 0];
      chain2.unshift.apply(chain2, requestInterceptorChain);
      chain2.push.apply(chain2, responseInterceptorChain);
      len = chain2.length;
      promise = Promise.resolve(config);
      while (i2 < len) {
        promise = promise.then(chain2[i2++], chain2[i2++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i2 = 0;
    while (i2 < len) {
      const onFulfilled = requestInterceptorChain[i2++];
      const onRejected = requestInterceptorChain[i2++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i2 = 0;
    len = responseInterceptorChain.length;
    while (i2 < len) {
      promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i2 = token._listeners.length;
      while (i2-- > 0) {
        token._listeners[i2](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c2) {
      cancel = c2;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/@beefree.io/sdk/dist/index.es.js
var O;
var t;
var n;
var T;
var N;
var A;
var I = function() {
  return I = Object.assign || function(E2) {
    for (var _2, R2 = 1, e = arguments.length; R2 < e; R2++) for (var O2 in _2 = arguments[R2]) Object.prototype.hasOwnProperty.call(_2, O2) && (E2[O2] = _2[O2]);
    return E2;
  }, I.apply(this, arguments);
};
"function" == typeof SuppressedError && SuppressedError, function(E2) {
  E2.DESKTOP = "desktop", E2.MOBILE = "mobile";
}(O || (O = {})), function(E2) {
  E2.BLUR = "blur", E2.HIDE = "hide";
}(t || (t = {})), function(E2) {
  E2.SELECT = "select", E2.SCROLL = "scroll", E2.HIGHLIGHT = "highlight", E2.FOCUS = "focus";
}(n || (n = {})), function(E2) {
  E2.DEFAULT = "default", E2.MIXED = "mixed", E2.AMP_ONLY = "amp_only", E2.HTML_ONLY = "html_only";
}(T || (T = {})), function(E2) {
  E2[E2.SAVE_UNAVAILABLE = 1e3] = "SAVE_UNAVAILABLE", E2[E2.AMP_CONTENT_DETECTED = 1001] = "AMP_CONTENT_DETECTED", E2[E2.INVALID_TEMPLATES = 1100] = "INVALID_TEMPLATES", E2[E2.TEMPLATE_CANNOT_SAVED = 1200] = "TEMPLATE_CANNOT_SAVED", E2[E2.LOCKED_ROW_CLICKED = 1300] = "LOCKED_ROW_CLICKED", E2[E2.LOCKED_MODULE_CLICKED = 1310] = "LOCKED_MODULE_CLICKED", E2[E2.WORKSPACE_NOT_AVAILABLE = 1002] = "WORKSPACE_NOT_AVAILABLE", E2[E2.FEATURE_NOT_AVAILABLE_FOR_PLAN = 1704] = "FEATURE_NOT_AVAILABLE_FOR_PLAN", E2[E2.GENERIC_BUMP_ERROR = 2e3] = "GENERIC_BUMP_ERROR", E2[E2.INVALID_TARGET_VERSION = 2100] = "INVALID_TARGET_VERSION", E2[E2.VALIDATION_ERROR_DETAIL = 2200] = "VALIDATION_ERROR_DETAIL", E2[E2.MISSING_TEMPLATE_VERSION = 2300] = "MISSING_TEMPLATE_VERSION", E2[E2.INVALID_TEMPLATE_VERSION = 2400] = "INVALID_TEMPLATE_VERSION", E2[E2.TRASFORMATION_ERROR = 2500] = "TRASFORMATION_ERROR", E2[E2.BACKWARD_TRASFORMATION_ERROR = 2600] = "BACKWARD_TRASFORMATION_ERROR", E2[E2.SERVICE_ERROR = 3e3] = "SERVICE_ERROR", E2[E2.API_GENERIC_ERROR = 9900] = "API_GENERIC_ERROR", E2[E2.GENERIC_ERROR = 9999] = "GENERIC_ERROR", E2[E2.FSP_GENERIC_ERROR = 3001] = "FSP_GENERIC_ERROR", E2[E2.FSP_BE_GENERIC_ERROR = 3100] = "FSP_BE_GENERIC_ERROR", E2[E2.FSP_RESOURCE_NOT_FOUND = 3200] = "FSP_RESOURCE_NOT_FOUND", E2[E2.FSP_PERMISSION_DENIED = 3300] = "FSP_PERMISSION_DENIED", E2[E2.FSP_RESOURCE_ALREADY_EXIST = 3400] = "FSP_RESOURCE_ALREADY_EXIST", E2[E2.FSP_FILE_NOT_UPLOADED = 3450] = "FSP_FILE_NOT_UPLOADED", E2[E2.FSP_REQUEST_ERROR = 3500] = "FSP_REQUEST_ERROR", E2[E2.FSP_USER_ERROR = 3600] = "FSP_USER_ERROR", E2[E2.FSP_WRONG_CREDENTIALS = 3650] = "FSP_WRONG_CREDENTIALS", E2[E2.AUTH_HEADER_MISSING = 4001] = "AUTH_HEADER_MISSING", E2[E2.AUTH_BEARER_INVALID = 4005] = "AUTH_BEARER_INVALID", E2[E2.AUTH_TOKEN_EXPIRED = 4010] = "AUTH_TOKEN_EXPIRED", E2[E2.BUMP_SERVICE_ERROR = 4015] = "BUMP_SERVICE_ERROR", E2[E2.JSON_GENERIC_ERROR = 4101] = "JSON_GENERIC_ERROR", E2[E2.JSON_CODE_TAG_ERROR = 4105] = "JSON_CODE_TAG_ERROR", E2[E2.JSON_HTML_BLOCK_ERROR = 4110] = "JSON_HTML_BLOCK_ERROR", E2[E2.JSON_CONDITIONAL_STATEMENT_ERROR = 4115] = "JSON_CONDITIONAL_STATEMENT_ERROR", E2[E2.JSON_ADD_ROW_CONDITIONAL_STATEMENT_ERROR = 4120] = "JSON_ADD_ROW_CONDITIONAL_STATEMENT_ERROR", E2[E2.JSON_ADD_ROW_STYLE_ERROR = 4125] = "JSON_ADD_ROW_STYLE_ERROR", E2[E2.JSON_ADD_ROW_CLASS_ERROR = 4130] = "JSON_ADD_ROW_CLASS_ERROR", E2[E2.JSON_ADD_ROW_COMPUTED_STYLE_ERROR = 4135] = "JSON_ADD_ROW_COMPUTED_STYLE_ERROR", E2[E2.JSON_CELL_WIDTH_ERROR = 4140] = "JSON_CELL_WIDTH_ERROR", E2[E2.JSON_ADD_COLUMN_BACKGROUND_ERROR = 4145] = "JSON_ADD_COLUMN_BACKGROUND_ERROR", E2[E2.JSON_MAIN_CSS_ERROR = 4190] = "JSON_MAIN_CSS_ERROR", E2[E2.JSON_MAIN_CSS_MEDIA_ERROR = 4191] = "JSON_MAIN_CSS_MEDIA_ERROR", E2[E2.JSON_SPECIFIC_CSS_ERROR = 4192] = "JSON_SPECIFIC_CSS_ERROR", E2[E2.JSON_CSS_RULE_ERROR = 4501] = "JSON_CSS_RULE_ERROR", E2[E2.JSON_CSS_GENERALE_PAGE_ERROR = 4502] = "JSON_CSS_GENERALE_PAGE_ERROR", E2[E2.JSON_BODY_CSS_ERROR = 4503] = "JSON_BODY_CSS_ERROR", E2[E2.JSON_COVERTING_CSS_ERROR = 4504] = "JSON_COVERTING_CSS_ERROR", E2[E2.HTML_TO_JSON_CONVERT_ERROR = 4201] = "HTML_TO_JSON_CONVERT_ERROR", E2[E2.HTML_COMMUNICATION_TO_JSON__ERROR = 4202] = "HTML_COMMUNICATION_TO_JSON__ERROR", E2[E2.HTML_COMMUNICATION_WORKER_TEXT_ERROR = 4210] = "HTML_COMMUNICATION_WORKER_TEXT_ERROR", E2[E2.HTML_TEXT_ERROR = 4211] = "HTML_TEXT_ERROR", E2[E2.HTML_COMMUNICATION_WORKER_BUTTON_ERROR = 4220] = "HTML_COMMUNICATION_WORKER_BUTTON_ERROR", E2[E2.HTML_BUTTON_ERROR = 4221] = "HTML_BUTTON_ERROR", E2[E2.HTML_COMMUNICATION_WORKER_VIDEO_ERROR = 4230] = "HTML_COMMUNICATION_WORKER_VIDEO_ERROR", E2[E2.HTML_VIDEO_ERROR = 4231] = "HTML_VIDEO_ERROR", E2[E2.HTML_COMMUNICATION_WORKER_SOCIAL_ERROR = 4240] = "HTML_COMMUNICATION_WORKER_SOCIAL_ERROR", E2[E2.HTML_SOCIAL_ERROR = 4241] = "HTML_SOCIAL_ERROR", E2[E2.HTML_COMMUNICATION_WORKER_ICON_ERROR = 4242] = "HTML_COMMUNICATION_WORKER_ICON_ERROR", E2[E2.HTML_ICON_ERROR = 4243] = "HTML_ICON_ERROR", E2[E2.HTML_COMMUNICATION_WORKER_MENU_ERROR = 4244] = "HTML_COMMUNICATION_WORKER_MENU_ERROR", E2[E2.HTML_MENU_ERROR = 4245] = "HTML_MENU_ERROR", E2[E2.HTML_COMMUNICATION_WORKER_IMAGE_ERROR = 4250] = "HTML_COMMUNICATION_WORKER_IMAGE_ERROR", E2[E2.HTML_IMAGE_ERROR = 4251] = "HTML_IMAGE_ERROR", E2[E2.HTML_COMMUNICATION_WORKER_MG_ERROR = 4260] = "HTML_COMMUNICATION_WORKER_MG_ERROR", E2[E2.HTML_CUSTOM_ADDON_ERROR = 4270] = "HTML_CUSTOM_ADDON_ERROR", E2[E2.HTML_POST_GENERIC_ERROR = 4301] = "HTML_POST_GENERIC_ERROR", E2[E2.HTML_POST_IMAGE_URI_ERROR = 4310] = "HTML_POST_IMAGE_URI_ERROR", E2[E2.HTML_POST_CUSTOM_HTML_ERROR = 4320] = "HTML_POST_CUSTOM_HTML_ERROR", E2[E2.HTML_POST_CUSTOM_CODE_TAG_ERROR = 4330] = "HTML_POST_CUSTOM_CODE_TAG_ERROR", E2[E2.HTML_POST_DISPLAY_CONDITION = 4340] = "HTML_POST_DISPLAY_CONDITION", E2[E2.RENDER_GENERIC_ERROR = 4600] = "RENDER_GENERIC_ERROR", E2[E2.RENDER_CLEAN_HTML_ERROR = 4601] = "RENDER_CLEAN_HTML_ERROR", E2[E2.RENDER_CLEAN_TEXT_ERROR = 4602] = "RENDER_CLEAN_TEXT_ERROR", E2[E2.RENDER_CHECK_FORM_ERROR = 4603] = "RENDER_CHECK_FORM_ERROR", E2[E2.RENDER_VALIDATION_ERROR = 4604] = "RENDER_VALIDATION_ERROR", E2[E2.RENDER_VIDEO_FORMAT_NOT_SUPPORTED_ERROR = 4605] = "RENDER_VIDEO_FORMAT_NOT_SUPPORTED_ERROR", E2[E2.POST_PROCESSING_FINAL_PAGE_ERROR = 4700] = "POST_PROCESSING_FINAL_PAGE_ERROR", E2[E2.EXPIRED_TOKEN_CANNOT_REFRESHED = 5101] = "EXPIRED_TOKEN_CANNOT_REFRESHED", E2[E2.EXPIRED_TOKEN_MUST_REFRESHED = 5102] = "EXPIRED_TOKEN_MUST_REFRESHED", E2[E2.WEBHOOK_CALL_FAILED = 5250] = "WEBHOOK_CALL_FAILED", E2[E2.FE_API_GENERIC_ERROR = 7e3] = "FE_API_GENERIC_ERROR", E2[E2.FE_API_INVALID_COMMAND = 7005] = "FE_API_INVALID_COMMAND", E2[E2.FE_API_INVALID_COMMAND_OPTIONS = 7010] = "FE_API_INVALID_COMMAND_OPTIONS", E2[E2.FE_API_ENTITY_LOCKED = 7020] = "FE_API_ENTITY_LOCKED", E2[E2.FE_API_ENTITY_NOT_FOUND = 7030] = "FE_API_ENTITY_NOT_FOUND", E2[E2.FE_API_ELEMENT_NOT_FOUND = 7040] = "FE_API_ELEMENT_NOT_FOUND", E2[E2.FE_API_FORBIDDEN_COMMAND = 7050] = "FE_API_FORBIDDEN_COMMAND";
}(N || (N = {})), function(E2) {
  E2.AI_INTEGRATION = "ai-integration", E2.AI_ALT_TEXT = "ai-alt-text", E2.AI_IMAGE_GENERATION = "ai-image-generation";
}(A || (A = {}));
var r;
var o;
var i;
!function(E2) {
  E2.MDM = "mdm";
}(r || (r = {})), function(E2) {
  E2.NEWCOMMENT = "NEW_COMMENT", E2.DELETECOMMENT = "COMMENT_DELETED", E2.CHANGECOMMENT = "COMMENT_EDITED", E2.THREADRESOLVED = "COMMENT_THREAD_RESOLVED", E2.THREADREOPENED = "COMMENT_THREAD_REOPENED";
}(o || (o = {})), function(E2) {
  E2.desktop = "desktop", E2.mobile = "mobile", E2.global = "global";
}(i || (i = {}));
var C;
var S;
var L = { TEXT_BLOCK: "01", IMAGE_BLOCK: "02", BUTTON_BLOCK: "03", DIVIDER_BLOCK: "04", SOCIAL_BLOCK: "05", DYNAMIC_CONTENT_BLOCK: "06", HTML_BLOCK: "07", VIDEO_BLOCK: "08", FORM: "09", ICONS: "10", MENU: "11", ROW: "14", MESSAGE: "16", SPACER: "18", PARAGRAPH: "22", LIST: "23", TABLE: "26" };
var M = { DROPPED: "00", DRAGGED: "01", DELETED: "02", DUPLICATED: "03", CHANGED: "04", OPENED: "05", CLOSED: "06", LOCKED: "07", SAVED: "08", RESTORED: "09", CONTENT_AREA_BACKGROUND_COLOR: "10", DO_NOT_STACK_ON_MOBILE: "11", ROW_BACKGROUND_IMAGE: "12", BACKGROUND_CENTER: "13", BACKGROUND_REPEAT: "14", BACKGROUND_FULL_WIDTH: "15", ROW_DISPLAY_CONDITION: "16", REVERSE_STACK_ORDER_ON_MOBILE: "17", TEXT_COLOR: "20", LINK_COLOR: "21", TEXT_EDITED: "23", LINE_HEIGHT: "24", CONTENT_AREA_WIDTH: "25", BACKGROUND_COLOR: "27", DEFAULT_FONT: "28", PADDING_ALL_SIDES: "30", PADDING_LEFT: "31", PADDING_RIGHT: "32", PADDING_TOP: "33", PADDING_BOTTOM: "34", HIDE_ON_MOBILE: "40", VIDEO_URL: "41", PLAY_ICON_TYPE: "42", PLAY_ICON_COLOR: "43", PLAY_ICON_SIZE: "44", ALIGN: "50", AUTOMATIC_IMAGE_RESIZING: "51", FULL_WIDTH_ON_MOBILE: "52", IMAGE_WIDTH: "53", ALTERNATE_TEXT: "60", DYNAMIC_IMAGE_SRC: "61", DYNAMIC_IMAGE_TOGGLE: "62", CHANGE_IMAGE: "63", IMAGE_LINK: "64", BUTTON_ALIGN: "70", BUTTON_LINK_TYPE: "71", BUTTON_WIDTH: "72", BUTTON_AUTO_WIDTH: "73", BUTTON_BACKGROUND_COLOR: "74", BORDER_RADIUS: "75", HTML_EDITED: "80", BORDER_ALL_SIDES: "81", BORDER_LEFT: "82", BORDER_RIGHT: "83", BORDER_TOP: "84", BORDER_BOTTOM: "85", DIVIDER_LINE_TOGGLE: "90", DIVIDER_WIDTH: "91", DIVIDER_HEIGHT: "92", DIVIDER_ALIGN: "93", ICON_NAME: "95", ICON_ALTERNATE_TEXT: "96", ICON_URL: "97", ICON_SPACING: "98", ICON_ALIGN: "99", BACKGROUND_VIDEO: "128", PARAGRAPH_SPACING: "129", FONT_WEIGHT: "130", LIST_TYPE: "131", START_LIST: "132", LIST_SPACING: "133", LIST_INDENT: "134", LIST_STYLE_POSITION: "135" };
var u = Object.fromEntries(Object.entries(L).flatMap(function(E2) {
  var _2 = E2[0], R2 = E2[1];
  return Object.entries(M).map(function(E3) {
    var e = E3[0], O2 = E3[1];
    return ["".concat(_2, "_").concat(e), "".concat(R2).concat(O2)];
  });
}));
!function(E2) {
  E2.REVIEWER = "reviewer";
}(C || (C = {})), function(E2) {
  E2.OK = "ok", E2.REFRESHING = "refreshing";
}(S || (S = {}));
var D = Object.freeze({ __proto__: null, ActionCodes: M, get BeePluginErrorCodes() {
  return N;
}, get BeePluginRoles() {
  return C;
}, ContentCodes: L, get EngageHandle() {
  return r;
}, EventCodes: u, get ExecCommands() {
  return n;
}, get LoadWorkspaceOptions() {
  return T;
}, ModuleDescriptorNames: { DIVIDER: "divider", TEXT: "text", IMAGE: "image", BUTTON: "button", HTML: "html", SOCIAL: "social", VIDEO: "video", ADDON: "addon", FORM: "form", MERGE_CONTENT: "mergeContent", CAROUSEL: "carousel", MENU: "menu", ICONS: "icons", HEADING: "heading", SPACER: "spacer", PARAGRAPH: "paragraph", LIST: "list" }, ModuleDescriptorOrderNames: { DIVIDER: "Divider", TEXT: "Text", IMAGE: "Image", BUTTON: "Button", HTML: "Html", SOCIAL: "Social", VIDEO: "Video", FORM: "Form", MERGE_CONTENT: "MergeContent", CAROUSEL: "Carousel", MENU: "Menu", ICONS: "Icons", HEADING: "Heading", SPACER: "Spacer", PARAGRAPH: "Paragraph", LIST: "List" }, ModuleTypes: { DIVIDER: "mailup-bee-newsletter-modules-divider", TEXT: "mailup-bee-newsletter-modules-text", IMAGE: "mailup-bee-newsletter-modules-image", BUTTON: "mailup-bee-newsletter-modules-button", HTML: "mailup-bee-newsletter-modules-html", SOCIAL: "mailup-bee-newsletter-modules-social", EMPTY: "mailup-bee-newsletter-modules-empty", VIDEO: "mailup-bee-newsletter-modules-video", ADDON: "mailup-bee-newsletter-modules-addon", FORM: "mailup-bee-newsletter-modules-form", MERGE_CONTENT: "mailup-bee-newsletter-modules-merge-content", CAROUSEL: "mailup-bee-newsletter-modules-carousel", MENU: "mailup-bee-newsletter-modules-menu", ICONS: "mailup-bee-newsletter-modules-icons", HEADING: "mailup-bee-newsletter-modules-heading", SPACER: "mailup-bee-newsletter-modules-spacer", PARAGRAPH: "mailup-bee-newsletter-modules-paragraph", LIST: "mailup-bee-newsletter-modules-list", TABLE: "mailup-bee-newsletter-modules-table" }, get OnCommentChangeEnum() {
  return o;
}, get OnInfoDetailHandle() {
  return A;
}, PREVIEW_CONTROL: { DARK_MODE: "dark", AMP: "amp", LANGUAGE: "language", DEVICE: "device", SIZE: "size", DISPLAY_CONDITIONS: "DISPLAY_CONDITIONS" }, RowLayoutType: { ONE_COLUMNS_EMPTY: "one-column-empty", TWO_COLUMNS_EMPTY: "two-columns-empty", TWO_COLUMNS_4_8_EMPTY: "two-columns-4-8-empty", TWO_COLUMNS_8_4_EMPTY: "two-columns-8-4-empty", TWO_COLUMNS_3_9_EMPTY: "two-columns-3-9-empty", TWO_COLUMNS_9_3_EMPTY: "two-columns-9-3-empty", THREE_COLUMNS_EMPTY: "three-columns-empty", THREE_COLUMNS_3_3_6_EMPTY: "three-columns-3-3-6-empty", THREE_COLUMNS_3_6_3_EMPTY: "three-columns-3-6-3-empty", THREE_COLUMNS_6_3_3_EMPTY: "three-columns-6-3-3-empty", FOUR_COLUMNS_EMPTY: "four-columns-empty", SIX_COLUMNS_EMPTY: "six-columns-empty" }, get StageDisplayOptions() {
  return t;
}, get StageModeOptions() {
  return O;
}, get TokenStatus() {
  return S;
}, get WorkspaceStage() {
  return i;
} });
var c = { CREATE: "create", START: "start", LOAD: "load", SAVE: "save", SEND: "send", PREVIEW: "preview", SAVE_AS_TEMPLATE: "saveAsTemplate", TOGGLE_STRUCTURE: "toggleStructure", TOGGLE_COMMENTS: "toggleComments", TOGGLE_PREVIEW: "togglePreview", TOGGLE_MERGETAGS_PREVIEW: "toggleMergeTagsPreview", SHOW_COMMENT: "showComment", JOIN: "join", RELOAD: "reload", LOAD_WORKSPACE: "loadWorkspace", LOAD_STAGE_MODE: "loadStageMode", LOAD_CONFIG: "loadConfig", LOAD_ROWS: "loadRows", UPDATE_TOKEN: "updateToken", GET_CONFIG: "getConfig", SWITCH_TEMPLATE_LANGUAGE: "switchTemplateLanguage", SWITCH_PREVIEW: "switchPreview", EXEC_COMMAND: "execCommand", GET_TEMPLATE_JSON: "getTemplateJson" };
var s = { access_token: "", status: S.OK, v2: true, coediting_session_id: null, shared: false };
var a = "https://app-rsrc.getbee.io/plugin/v2/BeePlugin.js";
var l = axios_default.create({ headers: { "content-type": "application/json" } });
var P = function(E2) {
  return E2 ? R.right(E2) : R.left(new Error("Config is missing"));
};
var G = function(E2) {
  return E2 && E2.access_token ? R.right(E2) : R.left(new Error("Malformed or undefined token, call UNSAFE_getToken() or pass your token on new BEE"));
};
var U = function(E2, e, O2) {
  return (0, import_function.pipe)(function(E3) {
    return E3 ? R.right(E3) : R.left(new Error("SessionId is missing"));
  }(e), R.chain(function() {
    return P(E2);
  }), R.chain(function() {
    return G(O2);
  }));
};
var m = function(E2, e) {
  return (0, import_function.pipe)(P(E2), R.chain(function() {
    return G(e);
  }));
};
var f = function(E2, e) {
  return (0, import_function.pipe)(function(E3) {
    return E3 ? R.right(E3) : R.left(new Error("Bee is not started"));
  }(E2), R.chain(function() {
    return function(E3) {
      return Object.keys(c).some(function(_2) {
        return c[_2] === E3;
      }) ? R.right(E3) : R.left(new Error("".concat(E3, " is not a correct method")));
    }(e);
  }));
};
var H = "";
var d = c.LOAD;
var g = c.SAVE;
var p = c.SEND;
var F = c.PREVIEW;
var h = c.SAVE_AS_TEMPLATE;
var V = c.TOGGLE_STRUCTURE;
var B = c.TOGGLE_COMMENTS;
var W = c.TOGGLE_PREVIEW;
var K = c.TOGGLE_MERGETAGS_PREVIEW;
var w = c.SHOW_COMMENT;
var b = c.RELOAD;
var v = c.LOAD_WORKSPACE;
var J = c.LOAD_STAGE_MODE;
var Y = c.LOAD_CONFIG;
var x = c.LOAD_ROWS;
var k = c.UPDATE_TOKEN;
var y = c.GET_CONFIG;
var X = c.SWITCH_TEMPLATE_LANGUAGE;
var j = c.SWITCH_PREVIEW;
var Z = c.EXEC_COMMAND;
var z = c.GET_TEMPLATE_JSON;
var Q = function(e, O2) {
  var t2, n2 = this;
  this.bee = function(_2) {
    (0, import_load_script.default)(H, function(E2) {
      if (E2) throw new Error("BeePlugin.js is not reachable");
      return _2();
    });
  }, this.UNSAFE_getToken = function(E2, _2, R2, e2) {
    var O3, t3, T2 = { authUrl: null !== (O3 = null == e2 ? void 0 : e2.authUrl) && void 0 !== O3 ? O3 : "https://auth.getbee.io/apiauth", beePluginUrl: null !== (t3 = null == e2 ? void 0 : e2.beePluginUrl) && void 0 !== t3 ? t3 : a };
    if (n2.token && n2.token.access_token) throw new Error("Token already declared");
    return function(E3) {
      var _3 = E3.authUrl, R3 = { grant_type: "password", client_id: E3.clientId, client_secret: E3.clientSecret, uid: E3.uid };
      return l.post(_3, R3);
    }({ authUrl: T2.authUrl, clientId: E2, clientSecret: _2, uid: R2 }).then(function(E3) {
      return n2.token = E3.data, E3.data;
    });
  }, this.start = function(E2, e2, O3, t3) {
    var T2 = n2, N2 = T2.bee, A2 = T2.token;
    return (0, import_function.pipe)(m(E2, A2), R.fold(function(E3) {
      var _2 = E3.message;
      return new Promise(function(E4) {
        return E4(_2);
      });
    }, function() {
      return new Promise(function(_2) {
        N2(function() {
          return BeePlugin.create(A2, I(I({}, E2), { startOrigin: "[npm] ".concat("@beefree.io/sdk"), startOriginVersion: "9.0.2-fix-optional-url-config.0" }), function(E3) {
            n2.instance = E3, E3.start(e2, t3), _2(E3);
          }, O3);
        });
      });
    }));
  }, this.startFileManager = function(E2, e2, O3) {
    var t3 = n2, T2 = t3.bee, N2 = t3.token;
    return (0, import_function.pipe)(m(E2, N2), R.fold(function(E3) {
      var _2 = E3.message;
      return new Promise(function(E4) {
        return E4(_2);
      });
    }, function() {
      return new Promise(function(_2) {
        T2(function() {
          return BeePlugin.create(N2, I(I({}, E2), { startOrigin: "[npm] ".concat("@beefree.io/sdk"), startOriginVersion: "9.0.2-fix-optional-url-config.0" }), function(E3) {
            n2.instance = E3, E3.start(O3), _2(E3);
          }, e2);
        });
      });
    }));
  }, this.join = function(E2, e2, O3) {
    var t3 = n2, T2 = t3.bee, N2 = t3.token;
    return (0, import_function.pipe)(U(E2, e2, n2.token), R.fold(function(E3) {
      var _2 = E3.message;
      throw new Error(_2);
    }, function() {
      return new Promise(function(_2) {
        T2(function() {
          return BeePlugin.create(N2, E2, function(E3) {
            n2.instance = E3, E3.join(e2), _2(E3);
          }, O3);
        });
      });
    }));
  }, this.executeAction = function(E2, e2, O3) {
    void 0 === e2 && (e2 = {}), void 0 === O3 && (O3 = {});
    var t3 = n2.instance;
    return (0, import_function.pipe)(f(t3, E2), R.fold(function(E3) {
      var _2 = E3.message;
      throw new Error(_2);
    }, function() {
      return t3[E2](e2, O3);
    }));
  }, this.executeGetConfigAction = function() {
    return n2.instance[y]();
  }, this.load = function(E2) {
    return n2.executeAction(d, E2);
  }, this.loadRows = function() {
    return n2.executeAction(x);
  }, this.save = function(E2) {
    return n2.executeAction(g, E2);
  }, this.saveAsTemplate = function() {
    return n2.executeAction(h);
  }, this.send = function(E2) {
    return n2.executeAction(p, E2);
  }, this.preview = function() {
    return n2.executeAction(F);
  }, this.toggleStructure = function() {
    return n2.executeAction(V);
  }, this.togglePreview = function() {
    return n2.executeAction(W);
  }, this.toggleComments = function() {
    return n2.executeAction(B);
  }, this.toggleMergeTagsPreview = function() {
    return n2.executeAction(K);
  }, this.showComment = function(E2) {
    return n2.executeAction(w, E2);
  }, this.reload = function(E2, _2) {
    return n2.executeAction(b, E2, _2);
  }, this.loadWorkspace = function(E2) {
    return n2.executeAction(v, E2);
  }, this.loadStageMode = function(E2) {
    return n2.executeAction(J, E2);
  }, this.loadConfig = function(E2) {
    return n2.executeAction(Y, E2);
  }, this.updateToken = function(E2) {
    return n2.executeAction(k, E2);
  }, this.getConfig = function() {
    return n2.executeGetConfigAction();
  }, this.switchTemplateLanguage = function(E2) {
    return n2.executeAction(X, E2);
  }, this.switchPreview = function(E2) {
    return n2.executeAction(j, E2);
  }, this.execCommand = function(E2, _2) {
    return n2.executeAction(Z, E2, _2);
  }, this.getTemplateJson = function() {
    return n2.executeAction(z, {});
  }, H = null !== (t2 = null == O2 ? void 0 : O2.beePluginUrl) && void 0 !== t2 ? t2 : a, this.token = e || s, this.instance = null;
};
export {
  D as beeTypes,
  Q as default
};
//# sourceMappingURL=@beefree__io_sdk.js.map
