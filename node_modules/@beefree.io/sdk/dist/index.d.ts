import { IBeeConfig, IEntityContentJson, IBeeOptions, ILoadConfig, ILoadStageMode, IUrlConfig, LoadWorkspaceOptions, IToken, BeeSaveOptions, ILanguage, IBeeConfigFileManager, ExecCommand, ExecCommands, IExecCommandOptions, ITemplateJson } from './types/bee';
import * as beeTypes from './types/bee';
declare class Bee {
    token: IToken;
    instance: any;
    constructor(token?: IToken, urlConfig?: IUrlConfig);
    bee: (bee: any) => void;
    UNSAFE_getToken: (clientId: string, clientSecret: string, uid: string, urlConfig?: IUrlConfig) => Promise<any>;
    start: (config: IBeeConfig, template: IEntityContentJson | object, bucketDir?: string, options?: IBeeOptions) => Promise<unknown>;
    startFileManager: (config: IBeeConfigFileManager, bucketDir?: string, options?: IBeeOptions) => Promise<unknown>;
    join: (config: IBeeConfig, sessionId: string, bucketDir?: string) => Promise<unknown>;
    executeAction: (action: string, param?: {}, options?: {}) => any;
    executeGetConfigAction: () => IBeeConfig;
    load: (template: IEntityContentJson) => any;
    loadRows: () => any;
    save: (options?: BeeSaveOptions) => any;
    saveAsTemplate: () => any;
    send: (args?: ILanguage) => any;
    preview: () => any;
    toggleStructure: () => any;
    togglePreview: () => any;
    toggleComments: () => any;
    toggleMergeTagsPreview: () => any;
    showComment: (comment: any) => any;
    reload: (template: IEntityContentJson, options?: IBeeOptions) => any;
    loadWorkspace: (type: LoadWorkspaceOptions) => any;
    loadStageMode: (args: ILoadStageMode) => any;
    loadConfig: (args: ILoadConfig) => any;
    updateToken: (updateTokenArgs: IToken) => any;
    getConfig: () => IBeeConfig;
    switchTemplateLanguage: (args: ILanguage) => any;
    switchPreview: (args?: ILanguage) => any;
    execCommand: (command: ExecCommands, options?: IExecCommandOptions) => ExecCommand;
    getTemplateJson: () => Promise<ITemplateJson>;
}
export default Bee;
export { beeTypes };
